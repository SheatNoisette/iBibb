/*
Copyright 2017 iBibb Team, Seeed Technology Inc and Adafruit Industries

Permission is hereby granted, free of charge, to any person obtaining a 
copy of this software and associated documentation files (the "Software"), 
to deal in the Software without restriction, including without limitation 
the rights to use, copy, modify, merge, publish, distribute, sublicense, 
and/or sell copies of the Software, and to permit persons to whom the 
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall 
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
 */
/*
  _   ____    _   _       _                    _____                 
 (_) |  _ \  (_) | |     | |                  |  __ \                
  _  | |_) |  _  | |__   | |__      ______    | |__) |  _ __    ___  
 | | |  _ <  | | | '_ \  | '_ \    |______|   |  ___/  | '__|  / _ \ 
 | | | |_) | | | | |_) | | |_) |              | |      | |    | (_) |
 |_| |____/  |_| |_.__/  |_.__/               |_|      |_|     \___/

*/

//Libraries

#include <Wire.h> //Interface I2C
#include <SeeedOLED.h> //Driver OLED Seeed
#include <OneWire.h> //Dépendance pour la sonde de température étanche
#include <SI114X.h> //Sonde de température et d'humidité
#include <DS1307.h> //Simplification des interactions avec l'horloge temps réel de type DS1307
#include <DHT.h> //Librarie d'Adafruit pour DHT11
#include <Ultrasonic.h> //Module ultrason

//Définitions internes
char iBibbVersion = "B2801a";
#define RELAISLED 2
#define RELAISPOMPE 4
#define SONDE 6
#define DHTPIN 8
#define FLOWSENSOR 12
#define DHTTYPE DHT11 //Type de capteur d'humidité et de température 
#define ULTRASON 10
#define PHPIN 0 //Analogique
float PHCALIBRATION = 526.0; //Valeur sur 1024
float PHCALIBRATIONPH = 7.5; //Ph Relevé lors de l'essais
float UVMINI = 0.05;

//----------------------------
//Images (Pour l'écran OLED)

const unsigned char iBibblogo [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xFC,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF9, 0xF9, 0xF9, 0xF9, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x81, 0x81, 0x81, 0xFF, 0xFF,
0x7E, 0x7E, 0x00, 0x00, 0xF9, 0xF9, 0xF9, 0xF9, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x18,
0x18, 0x18, 0xF8, 0xF8, 0xE0, 0xE0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x18, 0x18, 0x18, 0x18,
0xF8, 0xF8, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
0x0F, 0x07, 0x03, 0x83, 0xC1, 0xC1, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC,
0xFC, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x81, 0x81, 0x81, 0xFF, 0xFF,
0x7E, 0x7E, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x80,
0x80, 0x80, 0xFF, 0xFF, 0x7F, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80,
0xFF, 0xFF, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0xC0, 0xF0,
0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00,
0xC1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xC1, 0x01,
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
0x0F, 0x07, 0x83, 0xC3, 0xE0, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x04, 0x04, 0x04,
0x7F, 0x00, 0x00, 0x9F, 0x20, 0x20, 0x20, 0xFF, 0x00, 0x00, 0x3E, 0x41, 0x41, 0x41, 0x7F, 0x00,
0x00, 0x7F, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00, 0xFF,
0x41, 0x41, 0x41, 0x3E, 0x00, 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00, 0x7F, 0x01, 0x01,
0x01, 0x7E, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
0x8F, 0x8F, 0x8F, 0xC7, 0xC7, 0xC7, 0xC3, 0xE3, 0xE3, 0xF1, 0xF0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFE,
0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x03, 0x00, 0x80,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1C, 0x0E, 0x0E, 0x07, 0x07,
0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x81, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFC, 0x7F, 0x0F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x88, 0x88, 0x88, 0x71, 0x00, 0x00, 0x3E,
0x40, 0x40, 0x40, 0xFE, 0x00, 0x00, 0x4C, 0x92, 0x92, 0x92, 0x64, 0x00, 0x00, 0x02, 0x7F, 0x82,
0x82, 0x80, 0x00, 0x7C, 0x92, 0x92, 0x92, 0x5C, 0x00, 0x00, 0xFE, 0x02, 0x02, 0x3C, 0x02, 0x02,
0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0,
0xE0, 0xF0, 0xF8, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0F, 0x07, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//----------------------------
//--------------
//Objets
OneWire ds(SONDE); //Sonde de température étanche
SI114X SondeIR = SI114X(); //Déclaration d'un nouveau module de type SI114X pour la lumière
DS1307 HorlogeInterne; //Création de l'instance RTC
DHT SondeTempHumid(DHTPIN, DHTTYPE); //Objet pour la sonde de température et humidité
Ultrasonic moduleUltrason(ULTRASON);
//----------

//----------------
//Variables

//Flow sensor
int VitesseEau,InterruptionFlow;

//Relais
bool RelaisLedOn = false;
bool RelaisPompeOn = false;

//Bluetooth
String Bluetooth;

//Ultrason
long distanceUltrason;
//PhMétre
float PHValeur;
//DS1307
int Heure, Minutes, Secondes;

//Sunlight sensor
int LumiereVisible, ValeurIR;
float ValeurUV;

//Sonde de température et humidité DHT11
int DHTTemperature, DHTHumidite;

//Sonde de température
//----------------------------------------------------------------------------------
// ! Basé sur le code de "skywodd" / Le carnet du maker (www.carnetdumaker.net)
// GPL Version 3;
//----------------------------------------------------------------------------------
float temperatureSonde;
 
//Code de  retour associé à la fonction 
enum DS18B20_RCODES {
  READ_OK,  // Lecture ok
  NO_SENSOR_FOUND,  // Pas de capteur
  INVALID_ADDRESS,  // Adresse reçue invalide
  INVALID_SENSOR  // Capteur invalide (pas un DS18B20)
};

//Obtenir la valeur de la température
byte LireTemperature(float *temperature, byte reset_search) {
  byte data[9]; // data[] -> Données lues depuis le scratchpad
  byte addr[8]; // addr[] -> Adresse du module 1-Wire détecté
  // Mise à zéro du bus 1-Wire
  if (reset_search) {
    ds.reset_search();
  }
  //Recherche du capteur
  if (!ds.search(addr)) {
    // Pas de capteur
    return NO_SENSOR_FOUND;
  }
  // Vérification de l'adresse
  if (OneWire::crc8(addr, 7) != addr[7]) {
    // Adresse invalide
    return INVALID_ADDRESS;
  }
 
  // Vérification du type de capteur
  if (addr[0] != 0x28) {
    // Mauvais type de capteur
    return INVALID_SENSOR;
  }
 
  //Sélection du capteur 
  ds.reset();
  ds.select(addr);
  
  //Prise de mesure
  ds.write(0x44, 1);
  delay(800);
  
  // On réinitialise le bus
  ds.reset();
  ds.select(addr);
  ds.write(0xBE);
 //On lit la mémoire tampon
  for (byte i = 0; i < 9; i++) {
    data[i] = ds.read();
  }
   
  // On calcule la température
  *temperature = ((data[1] << 8) | data[0]) * 0.0625; 
  // 0.0625 -> Constante de calcul pour la précision du capteur.
  
  // Pas d'erreur
  return READ_OK;
}


void setup() {

  Wire.begin(); //Démarer l'interface I2C
  Serial.begin(9600); //Démarage de l'interface série (9600 Bps)
  Serial1.begin(9600); //Interface série pour le module bluetooth
  HorlogeInterne.begin();//Initialisation de la RTC
  InitRelais(); //Initialisation des relais
  InitOledScreen(); //Initialisation de l'écran
  SondeIR.Begin();
  SondeTempHumid.begin();
  InitialisationFlow(); //Flow sensor / Vitesse de l'eau écoulée

  AllumerRelais(2); //Mettre en marche la pompe
  
  //Initialisation terminée
  SeeedOled.deactivateScroll();
  SeeedOled.drawBitmap(iBibblogo,1024);
  delay(80);
  SeeedOled.setHorizontalScrollProperties(Scroll_Left,0,7,Scroll_2Frames); //De droite à gauche
  SeeedOled.activateScroll(); // Activer le scrolling
  
}

void loop() {
  Serial.println("iBibb Debug ----------------------------------");
  delay(100);
  //calculFlow();
  ReleverLumiere(); //Relever la lumière ambiante
  lirePh(); //Calculer le Ph de la solution
  LireTemps(); //Prendre l'heure du module RTC
  MesurerDistance(); //Relever la distance avec le module à ultrasons
  LireTemperatureHumid(); //Relever la température du module DHT11
  LireSondeEtanche(); //Calculer la température de la sonde étanche DS12B20

  //-------------------------------------------
  /*
  if (ValeurUV < UVMINI)
  {
    AllumerRelais(1); //Alumer les LEDs
  }
  else
  {
    EteindreRelais(1); //Alumer les LEDs
  }
  */
  //-------------------------------------------

  //Envoyer le tout au module
  EnvoyerDonneesBluetooth();
  delay(2000);
}
